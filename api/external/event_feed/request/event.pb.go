// Code generated by protoc-gen-go. DO NOT EDIT.
// source: external/event_feed/request/event.proto

package request

import (
	fmt "fmt"
	query "github.com/chef/automate/api/external/common/query"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventFilter struct {
	// Filters to be applied to the request.
	Filter []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	// Earliest events to return.
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// Latest events to return.
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// Count of events to return per page.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Used for pagination, to request results in ascending order.
	After int64 `protobuf:"varint,5,opt,name=after,proto3" json:"after,omitempty"`
	// Used for pagination, to request results in descending order.
	Before int64 `protobuf:"varint,6,opt,name=before,proto3" json:"before,omitempty"`
	// Used for pagination, to bookmark next set of results.
	Cursor string `protobuf:"bytes,7,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Used to group similar events together.
	Collapse             bool     `protobuf:"varint,8,opt,name=collapse,proto3" json:"collapse,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventFilter) Reset()         { *m = EventFilter{} }
func (m *EventFilter) String() string { return proto.CompactTextString(m) }
func (*EventFilter) ProtoMessage()    {}
func (*EventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7286ff547b04d1, []int{0}
}

func (m *EventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventFilter.Unmarshal(m, b)
}
func (m *EventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventFilter.Marshal(b, m, deterministic)
}
func (m *EventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFilter.Merge(m, src)
}
func (m *EventFilter) XXX_Size() int {
	return xxx_messageInfo_EventFilter.Size(m)
}
func (m *EventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_EventFilter proto.InternalMessageInfo

func (m *EventFilter) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *EventFilter) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *EventFilter) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *EventFilter) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *EventFilter) GetAfter() int64 {
	if m != nil {
		return m.After
	}
	return 0
}

func (m *EventFilter) GetBefore() int64 {
	if m != nil {
		return m.Before
	}
	return 0
}

func (m *EventFilter) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *EventFilter) GetCollapse() bool {
	if m != nil {
		return m.Collapse
	}
	return false
}

type EventCountsFilter struct {
	// Filters to be applied to the request.
	Filter []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	// Earliest events to return.
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// Latest events to return.
	End                  int64    `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventCountsFilter) Reset()         { *m = EventCountsFilter{} }
func (m *EventCountsFilter) String() string { return proto.CompactTextString(m) }
func (*EventCountsFilter) ProtoMessage()    {}
func (*EventCountsFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7286ff547b04d1, []int{1}
}

func (m *EventCountsFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventCountsFilter.Unmarshal(m, b)
}
func (m *EventCountsFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventCountsFilter.Marshal(b, m, deterministic)
}
func (m *EventCountsFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCountsFilter.Merge(m, src)
}
func (m *EventCountsFilter) XXX_Size() int {
	return xxx_messageInfo_EventCountsFilter.Size(m)
}
func (m *EventCountsFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCountsFilter.DiscardUnknown(m)
}

var xxx_messageInfo_EventCountsFilter proto.InternalMessageInfo

func (m *EventCountsFilter) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *EventCountsFilter) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *EventCountsFilter) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type EventExport struct {
	// JSON or CSV
	OutputType string `protobuf:"bytes,1,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
	// Filters to be applied to the request.
	Filter []string `protobuf:"bytes,2,rep,name=filter,proto3" json:"filter,omitempty"`
	// Earliest events to return.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Latest events to return.
	End int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	// Order the results should be returned in.
	Order                query.SortOrder `protobuf:"varint,5,opt,name=order,proto3,enum=chef.automate.api.common.query.SortOrder" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EventExport) Reset()         { *m = EventExport{} }
func (m *EventExport) String() string { return proto.CompactTextString(m) }
func (*EventExport) ProtoMessage()    {}
func (*EventExport) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7286ff547b04d1, []int{2}
}

func (m *EventExport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventExport.Unmarshal(m, b)
}
func (m *EventExport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventExport.Marshal(b, m, deterministic)
}
func (m *EventExport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventExport.Merge(m, src)
}
func (m *EventExport) XXX_Size() int {
	return xxx_messageInfo_EventExport.Size(m)
}
func (m *EventExport) XXX_DiscardUnknown() {
	xxx_messageInfo_EventExport.DiscardUnknown(m)
}

var xxx_messageInfo_EventExport proto.InternalMessageInfo

func (m *EventExport) GetOutputType() string {
	if m != nil {
		return m.OutputType
	}
	return ""
}

func (m *EventExport) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *EventExport) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *EventExport) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *EventExport) GetOrder() query.SortOrder {
	if m != nil {
		return m.Order
	}
	return query.SortOrder_ASC
}

func init() {
	proto.RegisterType((*EventFilter)(nil), "chef.automate.api.event_feed.request.EventFilter")
	proto.RegisterType((*EventCountsFilter)(nil), "chef.automate.api.event_feed.request.EventCountsFilter")
	proto.RegisterType((*EventExport)(nil), "chef.automate.api.event_feed.request.EventExport")
}

func init() {
	proto.RegisterFile("external/event_feed/request/event.proto", fileDescriptor_4e7286ff547b04d1)
}

var fileDescriptor_4e7286ff547b04d1 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcd, 0x8a, 0xdb, 0x30,
	0x18, 0xc4, 0x71, 0x9c, 0x3a, 0x0a, 0x94, 0xd6, 0x94, 0x22, 0xd2, 0x43, 0x4d, 0x28, 0xad, 0x7b,
	0x91, 0xa0, 0xbd, 0x94, 0x5e, 0x0a, 0x2d, 0xe9, 0xb5, 0xe0, 0xf4, 0xb4, 0x97, 0xa0, 0x38, 0x9f,
	0x13, 0x83, 0x6d, 0x29, 0xf2, 0xa7, 0x25, 0xc9, 0x4b, 0xed, 0x8b, 0xec, 0x43, 0x2d, 0x92, 0x9c,
	0x64, 0x61, 0xc3, 0x9e, 0xf6, 0xa6, 0x19, 0x34, 0x33, 0xdf, 0x1f, 0xf9, 0x02, 0x7b, 0x04, 0xdd,
	0x8a, 0x9a, 0xc3, 0x2d, 0xb4, 0xb8, 0x2c, 0x01, 0xd6, 0x5c, 0xc3, 0xce, 0x40, 0x87, 0x9e, 0x62,
	0x4a, 0x4b, 0x94, 0xc9, 0xa7, 0x62, 0x0b, 0x25, 0x13, 0x06, 0x65, 0x23, 0x10, 0x98, 0x50, 0x15,
	0xbb, 0x28, 0x58, 0xaf, 0x98, 0x7e, 0x3e, 0xdb, 0x15, 0xb2, 0x69, 0x64, 0xcb, 0x77, 0x06, 0xf4,
	0x81, 0x2b, 0xa1, 0x45, 0x03, 0x08, 0xba, 0xf3, 0x6e, 0xb3, 0xfb, 0x80, 0x4c, 0xe6, 0x56, 0xfe,
	0xb7, 0xaa, 0x11, 0x74, 0xf2, 0x9e, 0x8c, 0x4a, 0xf7, 0xa2, 0x41, 0x1a, 0x66, 0xe3, 0xbc, 0x47,
	0xc9, 0x3b, 0x12, 0x75, 0x28, 0x34, 0xd2, 0x41, 0x1a, 0x64, 0x61, 0xee, 0x41, 0xf2, 0x86, 0x84,
	0xd0, 0xae, 0x69, 0xe8, 0x38, 0xfb, 0x4c, 0x3e, 0x90, 0xb1, 0x12, 0x1b, 0x58, 0x76, 0xd5, 0x11,
	0xe8, 0x30, 0x0d, 0xb2, 0x28, 0x8f, 0x2d, 0xb1, 0xa8, 0x8e, 0x60, 0x4d, 0x44, 0x69, 0xbd, 0x23,
	0x6f, 0xe2, 0x80, 0x8d, 0x5c, 0x41, 0x29, 0x35, 0xd0, 0x91, 0xa3, 0x7b, 0x64, 0xf9, 0xc2, 0xe8,
	0x4e, 0x6a, 0xfa, 0x2a, 0x0d, 0x6c, 0x29, 0x1e, 0x25, 0x53, 0x12, 0x17, 0xb2, 0xae, 0x85, 0xea,
	0x80, 0xc6, 0x69, 0x90, 0xc5, 0xf9, 0x19, 0xcf, 0x16, 0xe4, 0xad, 0xeb, 0xe6, 0x8f, 0x34, 0x2d,
	0x76, 0x2f, 0xd3, 0xd3, 0xec, 0xee, 0x34, 0xa3, 0xf9, 0x5e, 0x49, 0x8d, 0xc9, 0x47, 0x32, 0x91,
	0x06, 0x95, 0xc1, 0x25, 0x1e, 0x14, 0xd0, 0xc0, 0x55, 0x47, 0x3c, 0xf5, 0xff, 0xa0, 0xe0, 0x51,
	0xe0, 0xe0, 0x7a, 0x60, 0x78, 0x25, 0x70, 0x78, 0x19, 0xe2, 0x2f, 0x12, 0x49, 0xbd, 0xee, 0xe7,
	0xf4, 0xfa, 0xdb, 0x57, 0xf6, 0x74, 0xe5, 0x7e, 0xab, 0xcc, 0x6d, 0x95, 0x2d, 0xa4, 0xc6, 0x7f,
	0x56, 0x90, 0x7b, 0xdd, 0xef, 0x9f, 0x37, 0x3f, 0x36, 0x15, 0x6e, 0xcd, 0xca, 0xfe, 0xe3, 0x56,
	0xcd, 0x4f, 0x6a, 0x2e, 0x54, 0xc5, 0x9f, 0xb9, 0xb5, 0xd5, 0xc8, 0x1d, 0xc6, 0xf7, 0x87, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc5, 0x3c, 0x12, 0x9e, 0x91, 0x02, 0x00, 0x00,
}
