// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interservice/cfgmgmt/request/actions.proto

package request

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PolicyRevision struct {
	RevisionId           string   `protobuf:"bytes,1,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty" toml:"revision_id,omitempty" mapstructure:"revision_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *PolicyRevision) Reset()         { *m = PolicyRevision{} }
func (m *PolicyRevision) String() string { return proto.CompactTextString(m) }
func (*PolicyRevision) ProtoMessage()    {}
func (*PolicyRevision) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea3ccf34be2e58, []int{0}
}

func (m *PolicyRevision) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyRevision.Unmarshal(m, b)
}
func (m *PolicyRevision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyRevision.Marshal(b, m, deterministic)
}
func (m *PolicyRevision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRevision.Merge(m, src)
}
func (m *PolicyRevision) XXX_Size() int {
	return xxx_messageInfo_PolicyRevision.Size(m)
}
func (m *PolicyRevision) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRevision.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRevision proto.InternalMessageInfo

func (m *PolicyRevision) GetRevisionId() string {
	if m != nil {
		return m.RevisionId
	}
	return ""
}

type PolicyUpdateAction struct {
	PolicyName           string                `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty" toml:"policy_name,omitempty" mapstructure:"policy_name,omitempty"`
	PolicyGroup          string                `protobuf:"bytes,2,opt,name=policy_group,json=policyGroup,proto3" json:"policy_group,omitempty" toml:"policy_group,omitempty" mapstructure:"policy_group,omitempty"`
	PolicyRevisionId     string                `protobuf:"bytes,3,opt,name=policy_revision_id,json=policyRevisionId,proto3" json:"policy_revision_id,omitempty" toml:"policy_revision_id,omitempty" mapstructure:"policy_revision_id,omitempty"`
	ChefServerFqdn       string                `protobuf:"bytes,4,opt,name=chef_server_fqdn,json=chefServerFqdn,proto3" json:"chef_server_fqdn,omitempty" toml:"chef_server_fqdn,omitempty" mapstructure:"chef_server_fqdn,omitempty"`
	ChefServerOrgname    string                `protobuf:"bytes,5,opt,name=chef_server_orgname,json=chefServerOrgname,proto3" json:"chef_server_orgname,omitempty" toml:"chef_server_orgname,omitempty" mapstructure:"chef_server_orgname,omitempty"`
	ChefServerUsername   string                `protobuf:"bytes,6,opt,name=chef_server_username,json=chefServerUsername,proto3" json:"chef_server_username,omitempty" toml:"chef_server_username,omitempty" mapstructure:"chef_server_username,omitempty"`
	PolicyfileContent    string                `protobuf:"bytes,7,opt,name=policyfile_content,json=policyfileContent,proto3" json:"policyfile_content,omitempty" toml:"policyfile_content,omitempty" mapstructure:"policyfile_content,omitempty"`
	Cookbooks            []*PolicyCookbookLock `protobuf:"bytes,8,rep,name=cookbooks,proto3" json:"cookbooks,omitempty" toml:"cookbooks,omitempty" mapstructure:"cookbooks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte                `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32                 `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *PolicyUpdateAction) Reset()         { *m = PolicyUpdateAction{} }
func (m *PolicyUpdateAction) String() string { return proto.CompactTextString(m) }
func (*PolicyUpdateAction) ProtoMessage()    {}
func (*PolicyUpdateAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea3ccf34be2e58, []int{1}
}

func (m *PolicyUpdateAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyUpdateAction.Unmarshal(m, b)
}
func (m *PolicyUpdateAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyUpdateAction.Marshal(b, m, deterministic)
}
func (m *PolicyUpdateAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyUpdateAction.Merge(m, src)
}
func (m *PolicyUpdateAction) XXX_Size() int {
	return xxx_messageInfo_PolicyUpdateAction.Size(m)
}
func (m *PolicyUpdateAction) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyUpdateAction.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyUpdateAction proto.InternalMessageInfo

func (m *PolicyUpdateAction) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *PolicyUpdateAction) GetPolicyGroup() string {
	if m != nil {
		return m.PolicyGroup
	}
	return ""
}

func (m *PolicyUpdateAction) GetPolicyRevisionId() string {
	if m != nil {
		return m.PolicyRevisionId
	}
	return ""
}

func (m *PolicyUpdateAction) GetChefServerFqdn() string {
	if m != nil {
		return m.ChefServerFqdn
	}
	return ""
}

func (m *PolicyUpdateAction) GetChefServerOrgname() string {
	if m != nil {
		return m.ChefServerOrgname
	}
	return ""
}

func (m *PolicyUpdateAction) GetChefServerUsername() string {
	if m != nil {
		return m.ChefServerUsername
	}
	return ""
}

func (m *PolicyUpdateAction) GetPolicyfileContent() string {
	if m != nil {
		return m.PolicyfileContent
	}
	return ""
}

func (m *PolicyUpdateAction) GetCookbooks() []*PolicyCookbookLock {
	if m != nil {
		return m.Cookbooks
	}
	return nil
}

type PolicyCookbookLock struct {
	CookbookName         string   `protobuf:"bytes,1,opt,name=cookbook_name,json=cookbookName,proto3" json:"cookbook_name,omitempty" toml:"cookbook_name,omitempty" mapstructure:"cookbook_name,omitempty"`
	PolicyId             string   `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty" toml:"policy_id,omitempty" mapstructure:"policy_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *PolicyCookbookLock) Reset()         { *m = PolicyCookbookLock{} }
func (m *PolicyCookbookLock) String() string { return proto.CompactTextString(m) }
func (*PolicyCookbookLock) ProtoMessage()    {}
func (*PolicyCookbookLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea3ccf34be2e58, []int{2}
}

func (m *PolicyCookbookLock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyCookbookLock.Unmarshal(m, b)
}
func (m *PolicyCookbookLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyCookbookLock.Marshal(b, m, deterministic)
}
func (m *PolicyCookbookLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyCookbookLock.Merge(m, src)
}
func (m *PolicyCookbookLock) XXX_Size() int {
	return xxx_messageInfo_PolicyCookbookLock.Size(m)
}
func (m *PolicyCookbookLock) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyCookbookLock.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyCookbookLock proto.InternalMessageInfo

func (m *PolicyCookbookLock) GetCookbookName() string {
	if m != nil {
		return m.CookbookName
	}
	return ""
}

func (m *PolicyCookbookLock) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func init() {
	proto.RegisterType((*PolicyRevision)(nil), "chef.automate.domain.cfgmgmt.request.PolicyRevision")
	proto.RegisterType((*PolicyUpdateAction)(nil), "chef.automate.domain.cfgmgmt.request.PolicyUpdateAction")
	proto.RegisterType((*PolicyCookbookLock)(nil), "chef.automate.domain.cfgmgmt.request.PolicyCookbookLock")
}

func init() {
	proto.RegisterFile("interservice/cfgmgmt/request/actions.proto", fileDescriptor_66ea3ccf34be2e58)
}

var fileDescriptor_66ea3ccf34be2e58 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4f, 0xe3, 0x30,
	0x14, 0xc4, 0xd5, 0xed, 0x6e, 0xb7, 0x75, 0xbb, 0x55, 0xd7, 0xbb, 0x87, 0x48, 0x7b, 0xd8, 0x52,
	0x38, 0x54, 0x08, 0x1c, 0xfe, 0x5c, 0x40, 0x9c, 0xa0, 0x12, 0xa8, 0x12, 0x02, 0x54, 0xd4, 0x1e,
	0xb8, 0x44, 0xae, 0xed, 0xa4, 0x56, 0x1b, 0xbf, 0xd4, 0x71, 0x2a, 0xf1, 0x51, 0xf8, 0xb6, 0x28,
	0x8e, 0xa3, 0x84, 0x0b, 0xe2, 0x16, 0xcd, 0xfb, 0x4d, 0x3c, 0x7e, 0x63, 0x74, 0x28, 0x95, 0x11,
	0x3a, 0x15, 0x7a, 0x27, 0x99, 0xf0, 0x59, 0x18, 0xc5, 0x51, 0x6c, 0x7c, 0x2d, 0xb6, 0x99, 0x48,
	0x8d, 0x4f, 0x99, 0x91, 0xa0, 0x52, 0x92, 0x68, 0x30, 0x80, 0x0f, 0xd8, 0x4a, 0x84, 0x84, 0x66,
	0x06, 0x62, 0x6a, 0x04, 0xe1, 0x10, 0x53, 0xa9, 0x88, 0xf3, 0x10, 0xe7, 0x19, 0x9d, 0xa2, 0xfe,
	0x13, 0x6c, 0x24, 0x7b, 0x9d, 0x89, 0x9d, 0x4c, 0x25, 0x28, 0xfc, 0x1f, 0x75, 0xb5, 0xfb, 0x0e,
	0x24, 0xf7, 0x1a, 0xc3, 0xc6, 0xb8, 0x33, 0x43, 0xa5, 0x34, 0xe5, 0xa3, 0xb7, 0x26, 0xc2, 0x85,
	0x67, 0x9e, 0x70, 0x6a, 0xc4, 0xb5, 0x3d, 0x36, 0xf7, 0x25, 0x56, 0x0d, 0x14, 0x8d, 0x45, 0xe9,
	0x2b, 0xa4, 0x07, 0x1a, 0x0b, 0xbc, 0x87, 0x7a, 0x0e, 0x88, 0x34, 0x64, 0x89, 0xf7, 0xcd, 0x12,
	0xce, 0x74, 0x97, 0x4b, 0xf8, 0x08, 0x61, 0x87, 0xd4, 0x23, 0x34, 0x2d, 0x38, 0x48, 0x3e, 0xe4,
	0x9c, 0x72, 0x3c, 0x46, 0x83, 0xfc, 0x8e, 0x41, 0xbe, 0x0f, 0xa1, 0x83, 0x70, 0xcb, 0x95, 0xf7,
	0xdd, 0xb2, 0xfd, 0x5c, 0x7f, 0xb6, 0xf2, 0xed, 0x96, 0x2b, 0x4c, 0xd0, 0x9f, 0x3a, 0x09, 0x3a,
	0xb2, 0x19, 0x7f, 0x58, 0xf8, 0x77, 0x05, 0x3f, 0x16, 0x03, 0x7c, 0x82, 0xfe, 0xd6, 0xf9, 0x2c,
	0x15, 0xda, 0x1a, 0x5a, 0xd6, 0x80, 0x2b, 0xc3, 0xdc, 0x4d, 0xf0, 0x71, 0x99, 0x3c, 0x94, 0x1b,
	0x11, 0x30, 0x50, 0x46, 0x28, 0xe3, 0xfd, 0x2c, 0x0e, 0xa8, 0x26, 0x93, 0x62, 0x80, 0x17, 0xa8,
	0xc3, 0x00, 0xd6, 0x4b, 0x80, 0x75, 0xea, 0xb5, 0x87, 0xcd, 0x71, 0xf7, 0xec, 0x82, 0x7c, 0xa5,
	0x30, 0x52, 0x6c, 0x7e, 0xe2, 0xcc, 0xf7, 0xc0, 0xd6, 0xb3, 0xea, 0x57, 0xa3, 0x45, 0x59, 0x4d,
	0x1d, 0xc0, 0xfb, 0xe8, 0x57, 0x89, 0xd4, 0xcb, 0xe9, 0x95, 0xa2, 0xad, 0xe7, 0x1f, 0xea, 0xb8,
	0xdd, 0x4b, 0xee, 0xba, 0x69, 0x17, 0xc2, 0x94, 0xdf, 0x5c, 0xbd, 0x5c, 0x46, 0xd2, 0xac, 0xb2,
	0x25, 0x61, 0x10, 0xfb, 0x79, 0x50, 0xbf, 0x0c, 0xea, 0xd3, 0x44, 0xfa, 0x9f, 0xbd, 0xcb, 0x65,
	0xcb, 0x3e, 0xc8, 0xf3, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xbb, 0x6b, 0xcc, 0xbe, 0x02,
	0x00, 0x00,
}
